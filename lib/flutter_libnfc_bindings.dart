// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for libnfc NFC library.
class FlutterLibnfcBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterLibnfcBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterLibnfcBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  void nfc_init(ffi.Pointer<ffi.Pointer<nfc_context>> context) {
    return _nfc_init(context);
  }

  late final _nfc_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<nfc_context>>)
        >
      >('nfc_init');
  late final _nfc_init = _nfc_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<nfc_context>>)>();

  void nfc_exit(ffi.Pointer<nfc_context> context) {
    return _nfc_exit(context);
  }

  late final _nfc_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nfc_context>)>>(
        'nfc_exit',
      );
  late final _nfc_exit = _nfc_exitPtr
      .asFunction<void Function(ffi.Pointer<nfc_context>)>();

  int nfc_register_driver(ffi.Pointer<nfc_driver> driver) {
    return _nfc_register_driver(driver);
  }

  late final _nfc_register_driverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_driver>)>>(
        'nfc_register_driver',
      );
  late final _nfc_register_driver = _nfc_register_driverPtr
      .asFunction<int Function(ffi.Pointer<nfc_driver>)>();

  ffi.Pointer<nfc_device> nfc_open(
    ffi.Pointer<nfc_context> context,
    ffi.Pointer<ffi.Char> connstring,
  ) {
    return _nfc_open(context, connstring);
  }

  late final _nfc_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<nfc_device> Function(
            ffi.Pointer<nfc_context>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('nfc_open');
  late final _nfc_open = _nfc_openPtr
      .asFunction<
        ffi.Pointer<nfc_device> Function(
          ffi.Pointer<nfc_context>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  void nfc_close(ffi.Pointer<nfc_device> pnd) {
    return _nfc_close(pnd);
  }

  late final _nfc_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nfc_device>)>>(
        'nfc_close',
      );
  late final _nfc_close = _nfc_closePtr
      .asFunction<void Function(ffi.Pointer<nfc_device>)>();

  int nfc_abort_command(ffi.Pointer<nfc_device> pnd) {
    return _nfc_abort_command(pnd);
  }

  late final _nfc_abort_commandPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_abort_command',
      );
  late final _nfc_abort_command = _nfc_abort_commandPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_list_devices(
    ffi.Pointer<nfc_context> context,
    ffi.Pointer<ffi.Pointer<ffi.Char>> connstrings,
    int connstrings_len,
  ) {
    return _nfc_list_devices(context, connstrings, connstrings_len);
  }

  late final _nfc_list_devicesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<nfc_context>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Size,
          )
        >
      >('nfc_list_devices');
  late final _nfc_list_devices = _nfc_list_devicesPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_context>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
        )
      >();

  int nfc_idle(ffi.Pointer<nfc_device> pnd) {
    return _nfc_idle(pnd);
  }

  late final _nfc_idlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_idle',
      );
  late final _nfc_idle = _nfc_idlePtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_init(ffi.Pointer<nfc_device> pnd) {
    return _nfc_initiator_init(pnd);
  }

  late final _nfc_initiator_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_initiator_init',
      );
  late final _nfc_initiator_init = _nfc_initiator_initPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_init_secure_element(ffi.Pointer<nfc_device> pnd) {
    return _nfc_initiator_init_secure_element(pnd);
  }

  late final _nfc_initiator_init_secure_elementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_initiator_init_secure_element',
      );
  late final _nfc_initiator_init_secure_element =
      _nfc_initiator_init_secure_elementPtr
          .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_select_passive_target(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation nm,
    ffi.Pointer<ffi.Uint8> pbtInitData,
    int szInitData,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_select_passive_target(
      pnd,
      nm,
      pbtInitData,
      szInitData,
      pnt,
    );
  }

  late final _nfc_initiator_select_passive_targetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            nfc_modulation,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<nfc_target>,
          )
        >
      >('nfc_initiator_select_passive_target');
  late final _nfc_initiator_select_passive_target =
      _nfc_initiator_select_passive_targetPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              nfc_modulation,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<nfc_target>,
            )
          >();

  int nfc_initiator_list_passive_targets(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation nm,
    ffi.Pointer<nfc_target> ant,
    int szTargets,
  ) {
    return _nfc_initiator_list_passive_targets(pnd, nm, ant, szTargets);
  }

  late final _nfc_initiator_list_passive_targetsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            nfc_modulation,
            ffi.Pointer<nfc_target>,
            ffi.Size,
          )
        >
      >('nfc_initiator_list_passive_targets');
  late final _nfc_initiator_list_passive_targets =
      _nfc_initiator_list_passive_targetsPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              nfc_modulation,
              ffi.Pointer<nfc_target>,
              int,
            )
          >();

  int nfc_initiator_poll_target(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_modulation> pnmTargetTypes,
    int szTargetTypes,
    int uiPollNr,
    int uiPeriod,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_poll_target(
      pnd,
      pnmTargetTypes,
      szTargetTypes,
      uiPollNr,
      uiPeriod,
      pnt,
    );
  }

  late final _nfc_initiator_poll_targetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<nfc_modulation>,
            ffi.Size,
            ffi.Uint8,
            ffi.Uint8,
            ffi.Pointer<nfc_target>,
          )
        >
      >('nfc_initiator_poll_target');
  late final _nfc_initiator_poll_target = _nfc_initiator_poll_targetPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          ffi.Pointer<nfc_modulation>,
          int,
          int,
          int,
          ffi.Pointer<nfc_target>,
        )
      >();

  int nfc_initiator_select_dep_target(
    ffi.Pointer<nfc_device> pnd,
    nfc_dep_mode ndm,
    nfc_baud_rate nbr,
    ffi.Pointer<nfc_dep_info> pndiInitiator,
    ffi.Pointer<nfc_target> pnt,
    int timeout,
  ) {
    return _nfc_initiator_select_dep_target(
      pnd,
      ndm.value,
      nbr.value,
      pndiInitiator,
      pnt,
      timeout,
    );
  }

  late final _nfc_initiator_select_dep_targetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.Pointer<nfc_dep_info>,
            ffi.Pointer<nfc_target>,
            ffi.Int,
          )
        >
      >('nfc_initiator_select_dep_target');
  late final _nfc_initiator_select_dep_target =
      _nfc_initiator_select_dep_targetPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              int,
              int,
              ffi.Pointer<nfc_dep_info>,
              ffi.Pointer<nfc_target>,
              int,
            )
          >();

  int nfc_initiator_poll_dep_target(
    ffi.Pointer<nfc_device> pnd,
    nfc_dep_mode ndm,
    nfc_baud_rate nbr,
    ffi.Pointer<nfc_dep_info> pndiInitiator,
    ffi.Pointer<nfc_target> pnt,
    int timeout,
  ) {
    return _nfc_initiator_poll_dep_target(
      pnd,
      ndm.value,
      nbr.value,
      pndiInitiator,
      pnt,
      timeout,
    );
  }

  late final _nfc_initiator_poll_dep_targetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.Pointer<nfc_dep_info>,
            ffi.Pointer<nfc_target>,
            ffi.Int,
          )
        >
      >('nfc_initiator_poll_dep_target');
  late final _nfc_initiator_poll_dep_target = _nfc_initiator_poll_dep_targetPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          int,
          int,
          ffi.Pointer<nfc_dep_info>,
          ffi.Pointer<nfc_target>,
          int,
        )
      >();

  int nfc_initiator_deselect_target(ffi.Pointer<nfc_device> pnd) {
    return _nfc_initiator_deselect_target(pnd);
  }

  late final _nfc_initiator_deselect_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_initiator_deselect_target',
      );
  late final _nfc_initiator_deselect_target = _nfc_initiator_deselect_targetPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_transceive_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_initiator_transceive_bytes(
      pnd,
      pbtTx,
      szTx,
      pbtRx,
      szRx,
      timeout,
    );
  }

  late final _nfc_initiator_transceive_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('nfc_initiator_transceive_bytes');
  late final _nfc_initiator_transceive_bytes =
      _nfc_initiator_transceive_bytesPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
            )
          >();

  int nfc_initiator_transceive_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
  ) {
    return _nfc_initiator_transceive_bits(
      pnd,
      pbtTx,
      szTxBits,
      pbtTxPar,
      pbtRx,
      szRx,
      pbtRxPar,
    );
  }

  late final _nfc_initiator_transceive_bitsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('nfc_initiator_transceive_bits');
  late final _nfc_initiator_transceive_bits = _nfc_initiator_transceive_bitsPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int nfc_initiator_transceive_bytes_timed(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint32> cycles,
  ) {
    return _nfc_initiator_transceive_bytes_timed(
      pnd,
      pbtTx,
      szTx,
      pbtRx,
      szRx,
      cycles,
    );
  }

  late final _nfc_initiator_transceive_bytes_timedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint32>,
          )
        >
      >('nfc_initiator_transceive_bytes_timed');
  late final _nfc_initiator_transceive_bytes_timed =
      _nfc_initiator_transceive_bytes_timedPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  int nfc_initiator_transceive_bits_timed(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
    ffi.Pointer<ffi.Uint32> cycles,
  ) {
    return _nfc_initiator_transceive_bits_timed(
      pnd,
      pbtTx,
      szTxBits,
      pbtTxPar,
      pbtRx,
      szRx,
      pbtRxPar,
      cycles,
    );
  }

  late final _nfc_initiator_transceive_bits_timedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint32>,
          )
        >
      >('nfc_initiator_transceive_bits_timed');
  late final _nfc_initiator_transceive_bits_timed =
      _nfc_initiator_transceive_bits_timedPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  int nfc_initiator_target_is_present(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_target_is_present(pnd, pnt);
  }

  late final _nfc_initiator_target_is_presentPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_target>)
        >
      >('nfc_initiator_target_is_present');
  late final _nfc_initiator_target_is_present =
      _nfc_initiator_target_is_presentPtr
          .asFunction<
            int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_target>)
          >();

  int nfc_target_init(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_target> pnt,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_target_init(pnd, pnt, pbtRx, szRx, timeout);
  }

  late final _nfc_target_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<nfc_target>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('nfc_target_init');
  late final _nfc_target_init = _nfc_target_initPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          ffi.Pointer<nfc_target>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  int nfc_target_send_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    int timeout,
  ) {
    return _nfc_target_send_bytes(pnd, pbtTx, szTx, timeout);
  }

  late final _nfc_target_send_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('nfc_target_send_bytes');
  late final _nfc_target_send_bytes = _nfc_target_send_bytesPtr
      .asFunction<
        int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int, int)
      >();

  int nfc_target_receive_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_target_receive_bytes(pnd, pbtRx, szRx, timeout);
  }

  late final _nfc_target_receive_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('nfc_target_receive_bytes');
  late final _nfc_target_receive_bytes = _nfc_target_receive_bytesPtr
      .asFunction<
        int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int, int)
      >();

  int nfc_target_send_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
  ) {
    return _nfc_target_send_bits(pnd, pbtTx, szTxBits, pbtTxPar);
  }

  late final _nfc_target_send_bitsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('nfc_target_send_bits');
  late final _nfc_target_send_bits = _nfc_target_send_bitsPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int nfc_target_receive_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
  ) {
    return _nfc_target_receive_bits(pnd, pbtRx, szRx, pbtRxPar);
  }

  late final _nfc_target_receive_bitsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('nfc_target_receive_bits');
  late final _nfc_target_receive_bits = _nfc_target_receive_bitsPtr
      .asFunction<
        int Function(
          ffi.Pointer<nfc_device>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  ffi.Pointer<ffi.Char> nfc_strerror(ffi.Pointer<nfc_device> pnd) {
    return _nfc_strerror(pnd);
  }

  late final _nfc_strerrorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)
        >
      >('nfc_strerror');
  late final _nfc_strerror = _nfc_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  int nfc_strerror_r(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Char> buf,
    int buflen,
  ) {
    return _nfc_strerror_r(pnd, buf, buflen);
  }

  late final _nfc_strerror_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('nfc_strerror_r');
  late final _nfc_strerror_r = _nfc_strerror_rPtr
      .asFunction<
        int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>, int)
      >();

  void nfc_perror(ffi.Pointer<nfc_device> pnd, ffi.Pointer<ffi.Char> s) {
    return _nfc_perror(pnd, s);
  }

  late final _nfc_perrorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>)
        >
      >('nfc_perror');
  late final _nfc_perror = _nfc_perrorPtr
      .asFunction<
        void Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>)
      >();

  int nfc_device_get_last_error(ffi.Pointer<nfc_device> pnd) {
    return _nfc_device_get_last_error(pnd);
  }

  late final _nfc_device_get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
        'nfc_device_get_last_error',
      );
  late final _nfc_device_get_last_error = _nfc_device_get_last_errorPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  ffi.Pointer<ffi.Char> nfc_device_get_name(ffi.Pointer<nfc_device> pnd) {
    return _nfc_device_get_name(pnd);
  }

  late final _nfc_device_get_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)
        >
      >('nfc_device_get_name');
  late final _nfc_device_get_name = _nfc_device_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  ffi.Pointer<ffi.Char> nfc_device_get_connstring(ffi.Pointer<nfc_device> pnd) {
    return _nfc_device_get_connstring(pnd);
  }

  late final _nfc_device_get_connstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)
        >
      >('nfc_device_get_connstring');
  late final _nfc_device_get_connstring = _nfc_device_get_connstringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  int nfc_device_get_supported_modulation(
    ffi.Pointer<nfc_device> pnd,
    nfc_mode mode,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> supported_mt,
  ) {
    return _nfc_device_get_supported_modulation(pnd, mode.value, supported_mt);
  }

  late final _nfc_device_get_supported_modulationPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
          )
        >
      >('nfc_device_get_supported_modulation');
  late final _nfc_device_get_supported_modulation =
      _nfc_device_get_supported_modulationPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
            )
          >();

  int nfc_device_get_supported_baud_rate(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation_type nmt,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> supported_br,
  ) {
    return _nfc_device_get_supported_baud_rate(pnd, nmt.value, supported_br);
  }

  late final _nfc_device_get_supported_baud_ratePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
          )
        >
      >('nfc_device_get_supported_baud_rate');
  late final _nfc_device_get_supported_baud_rate =
      _nfc_device_get_supported_baud_ratePtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
            )
          >();

  int nfc_device_get_supported_baud_rate_target_mode(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation_type nmt,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> supported_br,
  ) {
    return _nfc_device_get_supported_baud_rate_target_mode(
      pnd,
      nmt.value,
      supported_br,
    );
  }

  late final _nfc_device_get_supported_baud_rate_target_modePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
          )
        >
      >('nfc_device_get_supported_baud_rate_target_mode');
  late final _nfc_device_get_supported_baud_rate_target_mode =
      _nfc_device_get_supported_baud_rate_target_modePtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
            )
          >();

  int nfc_device_set_property_int(
    ffi.Pointer<nfc_device> pnd,
    nfc_property property,
    int value,
  ) {
    return _nfc_device_set_property_int(pnd, property.value, value);
  }

  late final _nfc_device_set_property_intPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.UnsignedInt, ffi.Int)
        >
      >('nfc_device_set_property_int');
  late final _nfc_device_set_property_int = _nfc_device_set_property_intPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>, int, int)>();

  int nfc_device_set_property_bool(
    ffi.Pointer<nfc_device> pnd,
    nfc_property property,
    bool bEnable,
  ) {
    return _nfc_device_set_property_bool(pnd, property.value, bEnable);
  }

  late final _nfc_device_set_property_boolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.UnsignedInt, ffi.Bool)
        >
      >('nfc_device_set_property_bool');
  late final _nfc_device_set_property_bool = _nfc_device_set_property_boolPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>, int, bool)>();

  void iso14443a_crc(
    ffi.Pointer<ffi.Uint8> pbtData,
    int szLen,
    ffi.Pointer<ffi.Uint8> pbtCrc,
  ) {
    return _iso14443a_crc(pbtData, szLen, pbtCrc);
  }

  late final _iso14443a_crcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('iso14443a_crc');
  late final _iso14443a_crc = _iso14443a_crcPtr
      .asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)
      >();

  void iso14443a_crc_append(ffi.Pointer<ffi.Uint8> pbtData, int szLen) {
    return _iso14443a_crc_append(pbtData, szLen);
  }

  late final _iso14443a_crc_appendPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>
      >('iso14443a_crc_append');
  late final _iso14443a_crc_append = _iso14443a_crc_appendPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void iso14443b_crc(
    ffi.Pointer<ffi.Uint8> pbtData,
    int szLen,
    ffi.Pointer<ffi.Uint8> pbtCrc,
  ) {
    return _iso14443b_crc(pbtData, szLen, pbtCrc);
  }

  late final _iso14443b_crcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('iso14443b_crc');
  late final _iso14443b_crc = _iso14443b_crcPtr
      .asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)
      >();

  void iso14443b_crc_append(ffi.Pointer<ffi.Uint8> pbtData, int szLen) {
    return _iso14443b_crc_append(pbtData, szLen);
  }

  late final _iso14443b_crc_appendPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>
      >('iso14443b_crc_append');
  late final _iso14443b_crc_append = _iso14443b_crc_appendPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Uint8> iso14443a_locate_historical_bytes(
    ffi.Pointer<ffi.Uint8> pbtAts,
    int szAts,
    ffi.Pointer<ffi.Size> pszTk,
  ) {
    return _iso14443a_locate_historical_bytes(pbtAts, szAts, pszTk);
  }

  late final _iso14443a_locate_historical_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('iso14443a_locate_historical_bytes');
  late final _iso14443a_locate_historical_bytes =
      _iso14443a_locate_historical_bytesPtr
          .asFunction<
            ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Size>,
            )
          >();

  void nfc_free(ffi.Pointer<ffi.Void> p) {
    return _nfc_free(p);
  }

  late final _nfc_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'nfc_free',
      );
  late final _nfc_free = _nfc_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nfc_version() {
    return _nfc_version();
  }

  late final _nfc_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'nfc_version',
      );
  late final _nfc_version = _nfc_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int nfc_device_get_information_about(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _nfc_device_get_information_about(pnd, buf);
  }

  late final _nfc_device_get_information_aboutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<nfc_device>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('nfc_device_get_information_about');
  late final _nfc_device_get_information_about =
      _nfc_device_get_information_aboutPtr
          .asFunction<
            int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
            )
          >();

  ffi.Pointer<ffi.Char> str_nfc_modulation_type(nfc_modulation_type nmt) {
    return _str_nfc_modulation_type(nmt.value);
  }

  late final _str_nfc_modulation_typePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>
      >('str_nfc_modulation_type');
  late final _str_nfc_modulation_type = _str_nfc_modulation_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> str_nfc_baud_rate(nfc_baud_rate nbr) {
    return _str_nfc_baud_rate(nbr.value);
  }

  late final _str_nfc_baud_ratePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>
      >('str_nfc_baud_rate');
  late final _str_nfc_baud_rate = _str_nfc_baud_ratePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int str_nfc_target(
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    ffi.Pointer<nfc_target> pnt,
    bool verbose,
  ) {
    return _str_nfc_target(buf, pnt, verbose);
  }

  late final _str_nfc_targetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<nfc_target>,
            ffi.Bool,
          )
        >
      >('str_nfc_target');
  late final _str_nfc_target = _str_nfc_targetPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<nfc_target>,
          bool,
        )
      >();
}

final class nfc_context extends ffi.Opaque {}

final class nfc_device extends ffi.Opaque {}

final class nfc_driver extends ffi.Opaque {}

enum nfc_property {
  NP_TIMEOUT_COMMAND(0),
  NP_TIMEOUT_ATR(1),
  NP_TIMEOUT_COM(2),
  NP_HANDLE_CRC(3),
  NP_HANDLE_PARITY(4),
  NP_ACTIVATE_FIELD(5),
  NP_ACTIVATE_CRYPTO1(6),
  NP_INFINITE_SELECT(7),
  NP_ACCEPT_INVALID_FRAMES(8),
  NP_ACCEPT_MULTIPLE_FRAMES(9),
  NP_AUTO_ISO14443_4(10),
  NP_EASY_FRAMING(11),
  NP_FORCE_ISO14443_A(12),
  NP_FORCE_ISO14443_B(13),
  NP_FORCE_SPEED_106(14);

  final int value;
  const nfc_property(this.value);

  static nfc_property fromValue(int value) => switch (value) {
    0 => NP_TIMEOUT_COMMAND,
    1 => NP_TIMEOUT_ATR,
    2 => NP_TIMEOUT_COM,
    3 => NP_HANDLE_CRC,
    4 => NP_HANDLE_PARITY,
    5 => NP_ACTIVATE_FIELD,
    6 => NP_ACTIVATE_CRYPTO1,
    7 => NP_INFINITE_SELECT,
    8 => NP_ACCEPT_INVALID_FRAMES,
    9 => NP_ACCEPT_MULTIPLE_FRAMES,
    10 => NP_AUTO_ISO14443_4,
    11 => NP_EASY_FRAMING,
    12 => NP_FORCE_ISO14443_A,
    13 => NP_FORCE_ISO14443_B,
    14 => NP_FORCE_SPEED_106,
    _ => throw ArgumentError('Unknown value for nfc_property: $value'),
  };
}

enum nfc_dep_mode {
  NDM_UNDEFINED(0),
  NDM_PASSIVE(1),
  NDM_ACTIVE(2);

  final int value;
  const nfc_dep_mode(this.value);

  static nfc_dep_mode fromValue(int value) => switch (value) {
    0 => NDM_UNDEFINED,
    1 => NDM_PASSIVE,
    2 => NDM_ACTIVE,
    _ => throw ArgumentError('Unknown value for nfc_dep_mode: $value'),
  };
}

@ffi.Packed(1)
final class nfc_dep_info extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> abtNFCID3;

  @ffi.Uint8()
  external int btDID;

  @ffi.Uint8()
  external int btBS;

  @ffi.Uint8()
  external int btBR;

  @ffi.Uint8()
  external int btTO;

  @ffi.Uint8()
  external int btPP;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Uint8> abtGB;

  @ffi.Size()
  external int szGB;

  @ffi.UnsignedInt()
  external int ndmAsInt;

  nfc_dep_mode get ndm => nfc_dep_mode.fromValue(ndmAsInt);
}

@ffi.Packed(1)
final class nfc_iso14443a_info extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> abtAtqa;

  @ffi.Uint8()
  external int btSak;

  @ffi.Size()
  external int szUidLen;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> abtUid;

  @ffi.Size()
  external int szAtsLen;

  @ffi.Array.multi([254])
  external ffi.Array<ffi.Uint8> abtAts;
}

@ffi.Packed(1)
final class nfc_felica_info extends ffi.Struct {
  @ffi.Size()
  external int szLen;

  @ffi.Uint8()
  external int btResCode;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtId;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtPad;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> abtSysCode;
}

final class nfc_iso14443b_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtPupi;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtApplicationData;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> abtProtocolInfo;

  @ffi.Uint8()
  external int ui8CardIdentifier;
}

@ffi.Packed(1)
final class nfc_iso14443bi_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtDIV;

  @ffi.Uint8()
  external int btVerLog;

  @ffi.Uint8()
  external int btConfig;

  @ffi.Size()
  external int szAtrLen;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Uint8> abtAtr;
}

final class nfc_iso14443biclass_info extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtUID;
}

final class nfc_iso14443b2sr_info extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtUID;
}

final class nfc_iso14443b2ct_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtUID;

  @ffi.Uint8()
  external int btProdCode;

  @ffi.Uint8()
  external int btFabCode;
}

final class nfc_jewel_info extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> btSensRes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> btId;
}

@ffi.Packed(1)
final class nfc_barcode_info extends ffi.Struct {
  @ffi.Size()
  external int szDataLen;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> abtData;
}

final class nfc_target_info extends ffi.Union {
  external nfc_iso14443a_info nai;

  external nfc_felica_info nfi;

  external nfc_iso14443b_info nbi;

  external nfc_iso14443bi_info nii;

  external nfc_iso14443b2sr_info nsi;

  external nfc_iso14443b2ct_info nci;

  external nfc_jewel_info nji;

  external nfc_dep_info ndi;

  external nfc_barcode_info nti;

  external nfc_iso14443biclass_info nhi;
}

enum nfc_baud_rate {
  NBR_UNDEFINED(0),
  NBR_106(1),
  NBR_212(2),
  NBR_424(3),
  NBR_847(4);

  final int value;
  const nfc_baud_rate(this.value);

  static nfc_baud_rate fromValue(int value) => switch (value) {
    0 => NBR_UNDEFINED,
    1 => NBR_106,
    2 => NBR_212,
    3 => NBR_424,
    4 => NBR_847,
    _ => throw ArgumentError('Unknown value for nfc_baud_rate: $value'),
  };
}

enum nfc_modulation_type {
  NMT_ISO14443A(1),
  NMT_JEWEL(2),
  NMT_ISO14443B(3),
  NMT_ISO14443BI(4),
  NMT_ISO14443B2SR(5),
  NMT_ISO14443B2CT(6),
  NMT_FELICA(7),
  NMT_DEP(8),
  NMT_BARCODE(9),
  NMT_ISO14443BICLASS(10);

  static const NMT_END_ENUM = NMT_ISO14443BICLASS;

  final int value;
  const nfc_modulation_type(this.value);

  static nfc_modulation_type fromValue(int value) => switch (value) {
    1 => NMT_ISO14443A,
    2 => NMT_JEWEL,
    3 => NMT_ISO14443B,
    4 => NMT_ISO14443BI,
    5 => NMT_ISO14443B2SR,
    6 => NMT_ISO14443B2CT,
    7 => NMT_FELICA,
    8 => NMT_DEP,
    9 => NMT_BARCODE,
    10 => NMT_ISO14443BICLASS,
    _ => throw ArgumentError('Unknown value for nfc_modulation_type: $value'),
  };

  @override
  String toString() {
    if (this == NMT_ISO14443BICLASS)
      return "nfc_modulation_type.NMT_ISO14443BICLASS, nfc_modulation_type.NMT_END_ENUM";
    return super.toString();
  }
}

enum nfc_mode {
  N_TARGET(0),
  N_INITIATOR(1);

  final int value;
  const nfc_mode(this.value);

  static nfc_mode fromValue(int value) => switch (value) {
    0 => N_TARGET,
    1 => N_INITIATOR,
    _ => throw ArgumentError('Unknown value for nfc_mode: $value'),
  };
}

@ffi.Packed(1)
final class nfc_modulation extends ffi.Struct {
  @ffi.UnsignedInt()
  external int nmtAsInt;

  nfc_modulation_type get nmt => nfc_modulation_type.fromValue(nmtAsInt);

  @ffi.UnsignedInt()
  external int nbrAsInt;

  nfc_baud_rate get nbr => nfc_baud_rate.fromValue(nbrAsInt);
}

final class nfc_target extends ffi.Struct {
  external nfc_target_info nti;

  external nfc_modulation nm;
}

const int NFC_BUFSIZE_CONNSTRING = 1024;

const int __has_attribute_nonnull = 1;

const int NFC_SUCCESS = 0;

const int NFC_EIO = -1;

const int NFC_EINVARG = -2;

const int NFC_EDEVNOTSUPP = -3;

const int NFC_ENOTSUCHDEV = -4;

const int NFC_EOVFLOW = -5;

const int NFC_ETIMEOUT = -6;

const int NFC_EOPABORTED = -7;

const int NFC_ENOTIMPL = -8;

const int NFC_ETGRELEASED = -10;

const int NFC_ERFTRANS = -20;

const int NFC_EMFCAUTHFAIL = -30;

const int NFC_ESOFT = -80;

const int NFC_ECHIP = -90;
